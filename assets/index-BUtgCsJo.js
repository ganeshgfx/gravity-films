import{S as y,G as h}from"./index-DqnYZ5nL.js";const p=180,o={x:0,y:0},m=2;function S(a,t,e){const{context:n}=a,s=e.count.numerator*e.count.denominator,r=e.count.numerator/e.count.denominator,l=p*(r-m)/r,g=Math.PI-y(l);if(n){n.beginPath(),n.translate(t.x,t.y),n.moveTo(o.x,o.y);for(let i=0;i<s;i++)n.lineTo(e.length,o.y),n.translate(e.length,o.y),n.rotate(g)}}const w=5;class d{draw(t){const{particle:e,radius:n}=t,s=this.getCenter(e,n),r=this.getSidesData(e,n);S(t,s,r)}getSidesCount(t){const e=t.shapeData;return Math.round(h((e==null?void 0:e.sides)??w))}}const c=3.5,u=2.66,f=3;class x extends d{constructor(){super(...arguments),this.validTypes=["polygon"]}getCenter(t,e){return{x:-e/(t.sides/c),y:-e/(u/c)}}getSidesData(t,e){const n=t.sides;return{count:{denominator:1,numerator:n},length:e*u/(n/f)}}}const D=1.66,C=3,P=2;class T extends d{constructor(){super(...arguments),this.validTypes=["triangle"]}getCenter(t,e){return{x:-e,y:e/D}}getSidesCount(){return C}getSidesData(t,e){const n=e*P;return{count:{denominator:2,numerator:3},length:n}}}async function F(a,t=!0){await a.addShape(new x,t)}async function v(a,t=!0){await a.addShape(new T,t)}async function A(a,t=!0){await F(a,t),await v(a,t)}export{F as loadGenericPolygonShape,A as loadPolygonShape,v as loadTriangleShape};
